{"version":3,"sources":["components/header/header.component.jsx","components/todo/todo.component.jsx","components/todos/todos.component.jsx","components/custom-input/customInput.component.jsx","components/checkbox/custom-checkbox.component.jsx","components/filter/filter.component.jsx","components/add-todo/addtodo.component.jsx","components/container/container.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","Divider","light","variant","Todo","props","FormControlLabel","control","Checkbox","onChange","e","handleCheckbox","todo","id","style","color","checked","completed","label","text","Button","onClick","handleRemove","Todos","filteredTodo","this","todos","filter","toLowerCase","trim","includes","filterText","hideCompleted","length","map","key","React","Component","CssTextField","withStyles","root","borderBottomColor","TextField","CustomInput","type","filterFunction","error","helperText","defaultProps","CustomCheckbox","handleHideCompleted","Filter","AddTodo","state","shouldError","saveText","setState","target","value","handleForm","preventDefault","todoText","prevState","uuid","handleAddTodo","reset","onSubmit","name","button","background","Container","App","concat","arr","find","index","findIndex","i","todoJson","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4c59544.chunk.js","sourcesContent":["import React from \"react\";\nimport { Divider } from \"@material-ui/core\";\nimport \"./header.styles.css\";\n\nexport const Header = () => (\n  <header className=\"header\">\n    <h1 className=\"big-title\">Todo App</h1>\n    <p className=\"subtitle\">A Todo Application built using React</p>\n    <Divider light={true} variant=\"middle\" />\n  </header>\n);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport \"./todo.styles.css\";\n\nexport const Todo = props => (\n  <div className=\"todo-outer-div\">\n    <div className=\"todo-inner-div\">\n      <FormControlLabel\n        control={\n          <Checkbox\n            onChange={e => props.handleCheckbox(props.todo.id)}\n            style={{ color: \"#abd1c6\" }}\n            checked={props.todo.completed}\n          />\n        }\n        label={props.todo.text}\n      />\n    </div>\n    <Button\n      variant=\"contained\"\n      onClick={e => props.handleRemove(props.todo.id)}\n      color=\"primary\"\n    >\n      <DeleteIcon />\n    </Button>\n  </div>\n);\n","import React from \"react\";\nimport { Todo } from \"../todo/todo.component\";\nimport \"./todos.styles.css\";\n\nexport class Todos extends React.Component {\n  render() {\n    let filteredTodo = this.props.todos.filter(todo =>\n      todo.text\n        .toLowerCase()\n        .trim()\n        .includes(this.props.filterText.toLowerCase())\n    );\n    this.props.hideCompleted &&\n      (filteredTodo = filteredTodo.filter(todo => !todo.completed));\n    if (filteredTodo.length === 0) {\n      return <p className=\"empty-message\">Nothing to show here</p>;\n    } else {\n      return (\n        <div className=\"todos-container\">\n          {filteredTodo.map(todo => (\n            <Todo\n              handleCheckbox={this.props.handleCheckbox}\n              todo={todo}\n              key={todo.id}\n              handleRemove={this.props.handleRemove}\n            />\n          ))}\n        </div>\n      );\n    }\n  }\n}\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst CssTextField = withStyles({\n  root: {\n    \"& .MuiInput-underline:before\": {\n      borderBottomColor: \"#abd1c6\"\n    },\n    \"& .MuiInputLabel-root\": {\n      color: \"#abd1c6\"\n    },\n    \"& label.Mui-focused\": {\n      color: \"#abd1c6\"\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"#abd1c6\"\n    },\n    \"& .MuiInput-input\": {\n      color: \"#abd1c6\"\n    }\n  }\n})(TextField);\n\nexport default function CustomInput(props) {\n  return (\n    <CssTextField\n      id=\"custom-css-standard-input\"\n      label={props.label}\n      type={props.type}\n      onChange={props.filterFunction}\n      error={props.error}\n      helperText={props.helperText}\n    />\n  );\n}\nCustomInput.defaultProps = {\n  type: \"text\",\n  error: false\n};\n","import React from \"react\";\nimport { Checkbox } from \"@material-ui/core\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\n\nconst CustomCheckbox = props => {\n  return (\n    <FormControlLabel\n      style={{ color: \"#abd1c6\" }}\n      control={\n        <Checkbox\n          onChange={props.handleHideCompleted}\n          style={{ color: \"#abd1c6\" }}\n        />\n      }\n      label={props.label}\n    />\n  );\n};\n\nexport default CustomCheckbox;\n","import React from \"react\";\nimport CustomInput from \"../custom-input/customInput.component\";\nimport \"./filter.styles.css\";\nimport Checkbox from \"../checkbox/custom-checkbox.component\";\n\nexport const Filter = props => (\n  <div className=\"filter\">\n    <CustomInput\n      type=\"search\"\n      label=\"Filter Todos\"\n      filterFunction={props.filterFunction}\n    />\n    <Checkbox\n      label={\"Hide Completed\"}\n      handleHideCompleted={props.handleHideCompleted}\n    />\n  </div>\n);\n","import React from \"react\";\nimport { uuid } from \"uuidv4\";\nimport Button from \"@material-ui/core/Button\";\nimport CustomInput from \"../custom-input/customInput.component\";\nimport \"./addtodo.styles.css\";\n\nclass AddTodo extends React.Component {\n  state = {\n    shouldError: false, // santizing data\n    text: \"\"\n  };\n  saveText = e => {\n    this.setState({ text: e.target.value });\n  };\n  handleForm = e => {\n    e.preventDefault();\n    const todoText = this.state.text.trim();\n    if (todoText.length === 0) {\n      this.setState(prevState => ({\n        shouldError: true\n      }));\n    } else {\n      const todo = {\n        text: todoText,\n        id: uuid(),\n        completed: false\n      };\n      this.props.handleAddTodo(todo);\n      // e.target.elements.newTodo.value = \"\";\n      e.target.reset();\n      this.setState({ shouldError: false, text: \"\" });\n    }\n  };\n  render() {\n    return (\n      <form className=\"addtodo\" onSubmit={this.handleForm}>\n        <h3 className=\"addtodo__title\"> Add new Todo</h3>\n        <div className=\"form-container\">\n          <CustomInput\n            filterFunction={this.saveText}\n            type=\"text\"\n            label=\"Add New Todo\"\n            name=\"newTodo\"\n            helperText={\n              this.state.shouldError ? \"Please enter valid todo\" : null\n            }\n            error={this.state.shouldError === true}\n          />\n          <Button type=\"submit\" style={style.button} variant=\"contained\">\n            Add Todo\n          </Button>\n        </div>\n      </form>\n    );\n  }\n}\nconst style = {\n  button: {\n    background: \"#f9bc60\",\n    color: \"#001e1d\"\n  }\n};\n\nexport { AddTodo };\n","import React from \"react\";\nimport { Header } from \"../header/header.component\";\nimport { Todos } from \"../todos/todos.component\";\nimport { Filter } from \"../filter/filter.component\";\nimport { AddTodo } from \"../add-todo/addtodo.component\";\nimport \"./container.styles.css\";\nexport const Container = props => (\n  <div className=\"container\">\n    <Header />\n    <Filter\n      filterFunction={props.filterFunction}\n      handleHideCompleted={props.handleHideCompleted}\n    />\n    <Todos\n      filterText={props.filterText}\n      todos={props.todos}\n      handleCheckbox={props.handleCheckbox}\n      handleRemove={props.handleRemove}\n      hideCompleted={props.hideCompleted}\n    />\n    <AddTodo handleAddTodo={props.handleAddTodo} />\n  </div>\n);\n","import React from \"react\";\nimport { Container } from \"./components/container/container.component\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [],\n      filterText: \"\",\n      hideCompleted: false\n    };\n  }\n\n  componentDidMount() {\n    let todos;\n    try {\n      const todoJson = localStorage.getItem(\"todos\");\n      todos = todoJson ? JSON.parse(todoJson) : [];\n    } catch (e) {\n      todos = [];\n    }\n    this.setState({\n      todos\n    });\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state) {\n      localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n    }\n  }\n\n  filterFunction = e => {\n    const filterText = e.target.value.trim();\n    this.setState({\n      filterText\n    });\n  };\n  handleAddTodo = todo =>\n    this.setState(prevState => ({\n      todos: prevState.todos.concat(todo)\n    }));\n  // checkbox of individual todo\n  handleCheckbox = id => {\n    const arr = [...this.state.todos];\n    const todo = arr.find(todo => todo.id === id);\n    todo.completed = !todo.completed;\n    this.setState(prevState => ({\n      todos: arr\n    }));\n  };\n  handleRemove = id => {\n    //const arr = [...this.state.todos];\n    const index = this.state.todos.findIndex(todo => todo.id === id);\n    index !== -1 &&\n      this.setState(prevState => ({\n        todos: prevState.todos.filter((todo, i) => i !== index)\n      }));\n  };\n  handleHideCompleted = () =>\n    this.setState(prevState => ({ hideCompleted: !prevState.hideCompleted }));\n\n  render() {\n    return (\n      <div>\n        <Container\n          todos={this.state.todos}\n          filterText={this.state.filterText}\n          filterFunction={this.filterFunction}\n          handleAddTodo={this.handleAddTodo}\n          handleCheckbox={this.handleCheckbox}\n          handleRemove={this.handleRemove}\n          handleHideCompleted={this.handleHideCompleted}\n          hideCompleted={this.state.hideCompleted}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}