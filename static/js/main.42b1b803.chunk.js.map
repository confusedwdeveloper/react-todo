{"version":3,"sources":["components/header/header.component.jsx","components/todo/todo.component.jsx","components/todos/todos.component.jsx","components/filter/filter.component.jsx","components/add-todo/addtodo.component.jsx","components/container/container.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Todo","props","checked","todo","completed","onChange","e","handleCheckbox","id","type","text","onClick","handleRemove","Todos","filteredTodo","this","todos","filter","toLowerCase","trim","includes","filterText","hideCompleted","length","map","key","React","Component","Filter","filterFunction","placeholder","handleHideCompleted","AddTodo","state","shouldError","handleForm","preventDefault","todoText","target","elements","newTodo","value","setState","prevState","uuid","handleAddTodo","onSubmit","name","Container","App","concat","arr","find","index","findIndex","i","todoJson","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAEaA,EAAS,kBACpB,gCACE,wCACA,qECHSC,EAAO,SAAAC,GAAK,OACvB,6BACE,6BACE,2BACEC,QAASD,EAAME,KAAKC,UACpBC,SAAU,SAAAC,GAAC,OAAIL,EAAMM,eAAeN,EAAME,KAAKK,KAC/CC,KAAK,aAEP,2BAAIR,EAAME,KAAKO,OAEjB,4BAAQC,QAAS,SAAAL,GAAC,OAAIL,EAAMW,aAAaX,EAAME,KAAKK,MAApD,YCTSK,EAAb,iLACY,IAAD,OACHC,EAAeC,KAAKd,MAAMe,MAAMC,QAAO,SAAAd,GAAI,OAC7CA,EAAKO,KACFQ,cACAC,OACAC,SAAS,EAAKnB,MAAMoB,WAAWH,kBAIpC,OAFAH,KAAKd,MAAMqB,gBACRR,EAAeA,EAAaG,QAAO,SAAAd,GAAI,OAAKA,EAAKC,cACxB,IAAxBU,EAAaS,OACR,mDAEAT,EAAaU,KAAI,SAAArB,GAAI,OAC1B,kBAAC,EAAD,CACEI,eAAgB,EAAKN,MAAMM,eAC3BJ,KAAMA,EACNsB,IAAKtB,EAAKK,GACVI,aAAc,EAAKX,MAAMW,sBAlBnC,GAA2Bc,IAAMC,WCDpBC,EAAS,SAAA3B,GAAK,OACzB,6BACE,2BACEQ,KAAK,SACLJ,SAAUJ,EAAM4B,eAChBC,YAAY,iBAEd,gDACiB,IACf,2BAAOzB,SAAUJ,EAAM8B,oBAAqBtB,KAAK,gB,OCRjDuB,E,2MACJC,MAAQ,CACNC,aAAa,G,EAEfC,WAAa,SAAA7B,GACXA,EAAE8B,iBACF,IAAMC,EAAW/B,EAAEgC,OAAOC,SAASC,QAAQC,MAAMtB,OACjD,GAAwB,IAApBkB,EAASd,OACX,EAAKmB,UAAS,SAAAC,GAAS,MAAK,CAC1BT,aAAa,UAEV,CACL,IAAM/B,EAAO,CACXO,KAAM2B,EACN7B,GAAIoC,iBACJxC,WAAW,GAEb,EAAKH,MAAM4C,cAAc1C,GACzBG,EAAEgC,OAAOC,SAASC,QAAQC,MAAQ,GAClC,EAAKC,SAAS,CAAER,aAAa,M,wEAI/B,OACE,0BAAMY,SAAU/B,KAAKoB,YACnB,6CACA,2BAAOY,KAAK,UAAUtC,KAAK,OAAOqB,YAAY,iBAC9C,4BAAQrB,KAAK,UAAb,OACCM,KAAKkB,MAAMC,aAAe,2D,GA5BbR,IAAMC,WCEfqB,EAAY,SAAA/C,GAAK,OAC5B,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACE4B,eAAgB5B,EAAM4B,eACtBE,oBAAqB9B,EAAM8B,sBAE7B,kBAAC,EAAD,CACEV,WAAYpB,EAAMoB,WAClBL,MAAOf,EAAMe,MACbT,eAAgBN,EAAMM,eACtBK,aAAcX,EAAMW,aACpBU,cAAerB,EAAMqB,gBAEvB,kBAAC,EAAD,CAASuB,cAAe5C,EAAM4C,kBC6DnBI,G,kBA3Eb,aAAe,IAAD,8BACZ,+CA0BFpB,eAAiB,SAAAvB,GACf,IAAMe,EAAaf,EAAEgC,OAAOG,MAAMtB,OAClC,EAAKuB,SAAS,CACZrB,gBA9BU,EAiCdwB,cAAgB,SAAA1C,GAAI,OAClB,EAAKuC,UAAS,SAAAC,GAAS,MAAK,CAC1B3B,MAAO2B,EAAU3B,MAAMkC,OAAO/C,QAnCpB,EAsCdI,eAAiB,SAAAC,GACf,IAAM2C,EAAG,YAAO,EAAKlB,MAAMjB,OACrBb,EAAOgD,EAAIC,MAAK,SAAAjD,GAAI,OAAIA,EAAKK,KAAOA,KAC1CL,EAAKC,WAAaD,EAAKC,UACvB,EAAKsC,UAAS,SAAAC,GAAS,MAAK,CAC1B3B,MAAOmC,OA3CG,EA8CdvC,aAAe,SAAAJ,GAEb,IAAM6C,EAAQ,EAAKpB,MAAMjB,MAAMsC,WAAU,SAAAnD,GAAI,OAAIA,EAAKK,KAAOA,MAClD,IAAX6C,GACE,EAAKX,UAAS,SAAAC,GAAS,MAAK,CAC1B3B,MAAO2B,EAAU3B,MAAMC,QAAO,SAACd,EAAMoD,GAAP,OAAaA,IAAMF,UAnDzC,EAsDdtB,oBAAsB,kBACpB,EAAKW,UAAS,SAAAC,GAAS,MAAK,CAAErB,eAAgBqB,EAAUrB,mBArDxD,EAAKW,MAAQ,CACXjB,MAAO,GACPK,WAAY,GACZC,eAAe,GALL,E,iFAUZ,IAAIN,EACJ,IACE,IAAMwC,EAAWC,aAAaC,QAAQ,SACtC1C,EAAQwC,EAAWG,KAAKC,MAAMJ,GAAY,GAC1C,MAAOlD,GACPU,EAAQ,GAEVD,KAAK2B,SAAS,CACZ1B,Y,yCAGe6C,EAAWlB,GACxBA,IAAc5B,KAAKkB,OACrBwB,aAAaK,QAAQ,QAASH,KAAKI,UAAUhD,KAAKkB,MAAMjB,U,+BAmC1D,OACE,6BACE,kBAAC,EAAD,CACEA,MAAOD,KAAKkB,MAAMjB,MAClBK,WAAYN,KAAKkB,MAAMZ,WACvBQ,eAAgBd,KAAKc,eACrBgB,cAAe9B,KAAK8B,cACpBtC,eAAgBQ,KAAKR,eACrBK,aAAcG,KAAKH,aACnBmB,oBAAqBhB,KAAKgB,oBAC1BT,cAAeP,KAAKkB,MAAMX,qB,GArElBI,IAAMC,YCQJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.42b1b803.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Header = () => (\n  <header>\n    <h1>Todo App</h1>\n    <p>A Todo Application built using React</p>\n  </header>\n);\n","import React from \"react\";\n\nexport const Todo = props => (\n  <div>\n    <div>\n      <input\n        checked={props.todo.completed}\n        onChange={e => props.handleCheckbox(props.todo.id)}\n        type=\"checkbox\"\n      />\n      <p>{props.todo.text}</p>\n    </div>\n    <button onClick={e => props.handleRemove(props.todo.id)}>Remove</button>\n  </div>\n);\n","import React from \"react\";\nimport { Todo } from \"../todo/todo.component\";\n\nexport class Todos extends React.Component {\n  render() {\n    let filteredTodo = this.props.todos.filter(todo =>\n      todo.text\n        .toLowerCase()\n        .trim()\n        .includes(this.props.filterText.toLowerCase())\n    );\n    this.props.hideCompleted &&\n      (filteredTodo = filteredTodo.filter(todo => !todo.completed));\n    if (filteredTodo.length === 0) {\n      return <p>Nothing to show here</p>;\n    } else {\n      return filteredTodo.map(todo => (\n        <Todo\n          handleCheckbox={this.props.handleCheckbox}\n          todo={todo}\n          key={todo.id}\n          handleRemove={this.props.handleRemove}\n        />\n      ));\n    }\n  }\n}\n","import React from \"react\";\n\nexport const Filter = props => (\n  <div>\n    <input\n      type=\"search\"\n      onChange={props.filterFunction}\n      placeholder=\"filter todos\"\n    />\n    <label>\n      Hide Completed{\" \"}\n      <input onChange={props.handleHideCompleted} type=\"checkbox\" />\n    </label>\n  </div>\n);\n","import React from \"react\";\nimport { uuid } from \"uuidv4\";\n\nclass AddTodo extends React.Component {\n  state = {\n    shouldError: false // santizing data\n  };\n  handleForm = e => {\n    e.preventDefault();\n    const todoText = e.target.elements.newTodo.value.trim();\n    if (todoText.length === 0) {\n      this.setState(prevState => ({\n        shouldError: true\n      }));\n    } else {\n      const todo = {\n        text: todoText,\n        id: uuid(),\n        completed: false\n      };\n      this.props.handleAddTodo(todo);\n      e.target.elements.newTodo.value = \"\";\n      this.setState({ shouldError: false });\n    }\n  };\n  render() {\n    return (\n      <form onSubmit={this.handleForm}>\n        <h3> Add new Todo</h3>\n        <input name=\"newTodo\" type=\"text\" placeholder=\"add new todo\" />\n        <button type=\"submit\">Add</button>\n        {this.state.shouldError && <p>Please enter valid text</p>}\n      </form>\n    );\n  }\n}\n\nexport { AddTodo };\n","import React from \"react\";\nimport { Header } from \"../header/header.component\";\nimport { Todos } from \"../todos/todos.component\";\nimport { Filter } from \"../filter/filter.component\";\nimport { AddTodo } from \"../add-todo/addtodo.component\";\nexport const Container = props => (\n  <div>\n    <Header />\n    <Filter\n      filterFunction={props.filterFunction}\n      handleHideCompleted={props.handleHideCompleted}\n    />\n    <Todos\n      filterText={props.filterText}\n      todos={props.todos}\n      handleCheckbox={props.handleCheckbox}\n      handleRemove={props.handleRemove}\n      hideCompleted={props.hideCompleted}\n    />\n    <AddTodo handleAddTodo={props.handleAddTodo} />\n  </div>\n);\n","import React from \"react\";\nimport { Container } from \"./components/container/container.component\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [],\n      filterText: \"\",\n      hideCompleted: false\n    };\n  }\n\n  componentDidMount() {\n    let todos;\n    try {\n      const todoJson = localStorage.getItem(\"todos\");\n      todos = todoJson ? JSON.parse(todoJson) : [];\n    } catch (e) {\n      todos = [];\n    }\n    this.setState({\n      todos\n    });\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state) {\n      localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n    }\n  }\n\n  filterFunction = e => {\n    const filterText = e.target.value.trim();\n    this.setState({\n      filterText\n    });\n  };\n  handleAddTodo = todo =>\n    this.setState(prevState => ({\n      todos: prevState.todos.concat(todo)\n    }));\n  // checkbox of individual todo\n  handleCheckbox = id => {\n    const arr = [...this.state.todos];\n    const todo = arr.find(todo => todo.id === id);\n    todo.completed = !todo.completed;\n    this.setState(prevState => ({\n      todos: arr\n    }));\n  };\n  handleRemove = id => {\n    //const arr = [...this.state.todos];\n    const index = this.state.todos.findIndex(todo => todo.id === id);\n    index !== -1 &&\n      this.setState(prevState => ({\n        todos: prevState.todos.filter((todo, i) => i !== index)\n      }));\n  };\n  handleHideCompleted = () =>\n    this.setState(prevState => ({ hideCompleted: !prevState.hideCompleted }));\n\n  render() {\n    return (\n      <div>\n        <Container\n          todos={this.state.todos}\n          filterText={this.state.filterText}\n          filterFunction={this.filterFunction}\n          handleAddTodo={this.handleAddTodo}\n          handleCheckbox={this.handleCheckbox}\n          handleRemove={this.handleRemove}\n          handleHideCompleted={this.handleHideCompleted}\n          hideCompleted={this.state.hideCompleted}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}